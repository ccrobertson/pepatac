#!/usr/bin/env bash
#
# PEPATAC pipeline installation check
#

if [ $# -gt 0 ] ; then
  echo "Usage: checkinstall"
  exit 1
fi

set -o pipefail
# set -e

echo -e "-----------------------------------------------------------"
echo -e "                                                           "
echo -e "             PEPATAC installation check                    "
echo -e "                                                           "
echo -e "-----------------------------------------------------------"


################################################################################
# Helpful functions
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    printf '%s' "$var"
}

is_executable() {
    if [ -x "$(command -v $1)" ]; then
        return 0
    else
        return 1
    fi
}

pip_show() {
    if pip show -q $1; then
        return 0
    else
        return 1
    fi
}

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

fail() {
    printf "${RED}\u2716 $@${NC}\n"
}

success() {
    printf "${GREEN}\xE2\x9C\x94 $@${NC}\n"
}

warn() {
    printf "${YELLOW}\u26A0 $@${NC}\n"
}

################################################################################
echo -e "Checking base requirements...                              "

BASE_REQS=0

declare -a requiredPkgs=("refgenie" "looper")

for package in ${requiredPkgs[@]}; do
    if ! pip_show $package; then
        echo $(fail "ERROR: PEPATAC requires the Python package, $package. Try pip install $package.")
        printf "\n"
        exit 1
    fi
done

if [ $BASE_REQS -eq 0 ]; then
    echo $(success "SUCCESS: Minimum requirements met.")
fi  


################################################################################
echo -e "-----------------------------------------------------------"
echo -e "Checking native installation...                            "
NATIVE_INSTALL=0

# Check Python
if ! is_executable "python"; then
    echo $(warn "WARNING: PEPATAC requires python 3.0 or greater. Install python and checkinstall again.")
    printf "\n"
    NATIVE_INSTALL=1
    BULKER_INSTALL=1
else
    ver=$(python -V 2>&1 | sed 's/.* \([0-9]\).\([0-9]\).*/\1\2/')
    if [ "$ver" -lt "30" ]; then
        echo $(warn "WARNING: PEPATAC requires python 3.0 or greater. Update python and checkinstall again.")
        printf "\n"
        NATIVE_INSTALL=1
        BULKER_INSTALL=1
    fi
fi

# Check Python packages
if ! is_executable "pip"; then
    echo $(warn "WARNING: Please install pip and checkinstall again.")
    printf "\n"
    NATIVE_INSTALL=1
    BULKER_INSTALL=1
fi

if [ -f "requirements.txt" ]; then
    while IFS= read -r line; do
        [ "${line:0:1}" = "#" ] && continue
        IFS='>=' read -r -a array <<< "$line"
        package=${array[0]}
        required=${array[2]}
        required=$(trim ${required})
        IFS='.' read -r -a required_version <<< "$required"
        declare -i rmajor
        declare -i rminor
        declare -i rpatch
        rmajor=$(echo "${required_version[0]}" | awk '{ print $1+0; exit }')
        rminor=$(echo "${required_version[1]}" | awk '{ print $1+0; exit }')
        rpatch=$(echo "${required_version[2]}" | awk '{ print $1+0; exit }')

        if ! pip_show "${package}"; then
            echo $(warn "WARNING: PEPATAC requires the Python package, $package, >= $required. Try pip install $package and checkinstall again.")
            printf "\n"
            NATIVE_INSTALL=1
            BULKER_INSTALL=1
        else
            installed=$(pip show ${package} | grep -iw 'Version' | awk -F':' '{print $2}' | tr -d '\n')
            installed=$(trim ${installed})
            IFS='.' read -r -a installed_version <<< "$installed"
            declare -i imajor
            declare -i iminor
            declare -i ipatch
            imajor=$(echo "${installed_version[0]}" | awk '{ print $1+0; exit }')
            iminor=$(echo "${installed_version[1]}" | awk '{ print $1+0; exit }')
            ipatch=$(echo "${installed_version[2]}" | awk '{ print $1+0; exit }')

            if ! [ -z "$required" ]; then
                if [ $imajor -lt $rmajor ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -lt $rminor ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -eq $rminor ] && [ $ipatch -lt $rpatch ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                else
                    echo -e $(success "SUCCESS: Python package ${package}\trequired: ${required}\tinstalled: ${installed}")
                fi
            else
                echo -e $(success "SUCCESS: Python package ${package}\trequired: any\tinstalled: ${installed_version}")
            fi
        fi
    done < "requirements.txt"
else
    declare -a requiredPkgs=("attmap>=0.12.9" "bio>=0.2.4" "codecov>=2.0" "colorama>=0.3.9" "Cython>=0.29" "cykhash>=1.0.2 " "divvy>=0.5.0" "eido>=0.1.3" "hypothesis==4.38.0" "jinja2" "jsonschema>=3.0.1" "logmuse>=0.2.5" "looper>=1.2.1" "MACS2>=2.2.7.1" "numpy>=1.17" "oyaml" "pararead" "pandas>=0.20.2" "peppy>=0.31.0" "piper" "psutil" "pysam>=0.13" "python-Levenshtein>=0.12.0" "pyyaml>=3.13" "refgenconf>=0.7.0" "refgenie" "ubiquerg>=0.6.1" "yacman>=0.6.7")

    for package in ${requiredPkgs[@]}; do
        IFS='>=' read -r -a array <<< "$package"
        package=${array[0]}
        required=${array[2]}
        required=$(trim ${required})
        IFS='.' read -r -a required_version <<< "$required"
        declare -i rmajor
        declare -i rminor
        declare -i rpatch
        rmajor=$(echo "${required_version[0]}" | awk '{ print $1+0; exit }')
        rminor=$(echo "${required_version[1]}" | awk '{ print $1+0; exit }')
        rpatch=$(echo "${required_version[2]}" | awk '{ print $1+0; exit }')

        if ! pip_show "${package}" 2&>/dev/null ; then
            echo $(warn "WARNING: PEPATAC requires the Python package, $package, >= $required. Try pip install $package.")
            # printf "\n"
            NATIVE_INSTALL=1
            BULKER_INSTALL=1
        else
            installed=$(pip show ${package} | grep -iw 'Version' | awk -F':' '{print $2}' | tr -d '\n')
            installed=$(trim ${installed})
            IFS='.' read -r -a installed_version <<< "$installed"
            declare -i imajor
            declare -i iminor
            declare -i ipatch
            imajor=$(echo "${installed_version[0]}" | awk '{ print $1+0; exit }')
            iminor=$(echo "${installed_version[1]}" | awk '{ print $1+0; exit }')
            ipatch=$(echo "${installed_version[2]}" | awk '{ print $1+0; exit }')

            if ! [ -z "$required" ]; then
                if [ $imajor -lt $rmajor ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -lt $rminor ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -eq $rminor ] && [ $ipatch -lt $rpatch ]; then
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    NATIVE_INSTALL=1
                    BULKER_INSTALL=1
                else
                    echo -e $(success "SUCCESS: Python package ${package}\trequired: ${required}\tinstalled: ${installed}")
                fi
            else
                echo -e $(success "SUCCESS: Python package ${package}\trequired: any\tinstalled: ${installed_version}")
            fi
        fi
    done
fi

# Check tool installation
declare -a requiredCommands=("perl" "awk" "grep" "sed" "bedtools" "bowtie2" "fseq" "macs2" "preseq" "samblaster" "samtools" "skewer" "bedToBigBed" "bigWigCat" "wigToBigWig" "Rscript")

for cmd in ${requiredCommands[@]}; do
    if ! is_executable $cmd; then
        echo $(warn "WARNING: Install $cmd and checkinstall again.")
        # printf "\n"
        NATIVE_INSTALL=1
    else
        echo -e $(success "SUCCESS: ${cmd}")
    fi
done

## Check R packages
if ! is_executable "R"; then
    echo $(warn "WARNING: PEPATAC requires R 3.5 or greater. Install R and checkinstall again.")
    printf "\n"
    NATIVE_INSTALL=1
else
    rVer=$(R --version 2>&1 | grep 'R version' | awk '{print $3}')
    rVer=$(echo "${rVer//.}")
    if [ "$rVer" -lt "350" ]; then
        echo $(warn "WARNING: Please update R to >=3.5 and checkinstall again.")
        printf "\n"
        NATIVE_INSTALL=1
    fi
fi

declare -a requiredRPackages=("optigrab" "devtools" "GenomicDistributions" "PEPATACr" "data.table" "pepr" "gplots" "grid" "ggplot2" "scales" "IRanges" "GenomicRanges")
for package in ${requiredRPackages[@]}; do
    cmd=$(echo "Rscript -e 'library(\"$package\")'")
    packageInstalled=$(eval $cmd 2>&1)
    if [[ "$packageInstalled" == *Error* ]]; then
        echo $(warn "WARNING: Please install the R package, $package, and checkinstall again.")
        printf "\n"
        NATIVE_INSTALL=1
    else
        echo -e $(success "SUCCESS: R package: ${package}")
    fi
done

################################################################################
echo -e "-----------------------------------------------------------"
echo -e "Checking conda installation...                             "
CONDA_INSTALL=0

if ! is_executable "conda"; then
    echo $(warn "WARNING: Install conda to use conda environments and checkinstall again.")
    printf "\n"
    CONDA_INSTALL=1
else
    eval "$(conda shell.bash hook)"
    conda activate pepatac

    unset PYTHONPATH
    unset R_LIBS

    # Check Python
    if ! is_executable "python"; then
        echo $(warn "WARNING: PEPATAC requires python 3.0 or greater. Install python and checkinstall again.")
        printf "\n"
        CONDA_INSTALL=1
    else
        #echo "which python: $(which python)"
        ver=$(python -V 2>&1 | sed 's/.* \([0-9]\).\([0-9]\).*/\1\2/')
        if [ "$ver" -lt "30" ]; then
            echo $(warn "WARNING: PEPATAC requires python 3.0 or greater. Update python and checkinstall again.")
            printf "\n"
            CONDA_INSTALL=1
        fi
    fi

    # Check Python packages
    if ! is_executable "pip"; then
        echo $(warn "WARNING: PEPATAC requires pip. Please install pip and checkinstall again.")
        printf "\n"
        CONDA_INSTALL=1
    fi

    while IFS= read -r line; do
        [ "${line:0:1}" = "#" ] && continue
        IFS='>=' read -r -a array <<< "$line"
        package=${array[0]}
        required=${array[2]}
        required=$(trim ${required})
        IFS='.' read -r -a required_version <<< "$required"
        declare -i rmajor
        declare -i rminor
        declare -i rpatch
        rmajor=$(echo "${required_version[0]}" | awk '{ print $1+0; exit }')
        rminor=$(echo "${required_version[1]}" | awk '{ print $1+0; exit }')
        rpatch=$(echo "${required_version[2]}" | awk '{ print $1+0; exit }')

        if ! pip_show "${package}"; then
            echo $(warn "WARNING: PEPATAC requires the Python package, $package, >= $required. Try pip install $package and checkinstall again.")
            printf "\n"
            CONDA_INSTALL=1
        else
            installed=$(pip show ${package} | grep -iw 'Version' | awk -F':' '{print $2}' | tr -d '\n')
            installed=$(trim ${installed})
            IFS='.' read -r -a installed_version <<< "$installed"
            declare -i imajor
            declare -i iminor
            declare -i ipatch
            imajor=$(echo "${installed_version[0]}" | awk '{ print $1+0; exit }')
            iminor=$(echo "${installed_version[1]}" | awk '{ print $1+0; exit }')
            ipatch=$(echo "${installed_version[2]}" | awk '{ print $1+0; exit }')

            if ! [ -z "$required" ]; then
                if [ $imajor -lt $rmajor ]; then
                    #echo -e "Installed major: ${imajor}\tRequired major: ${rmajor}"
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    CONDA_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -lt $rminor ]; then
                    #echo -e "Installed minor: ${iminor}\tRequired minor: ${rminor}"
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    CONDA_INSTALL=1
                elif [ $imajor -eq $rmajor ] && [ $iminor -eq $rminor ] && [ $ipatch -lt $rpatch ]; then
                    #echo -e "Installed patch: ${ipatch}\tRequired patch: ${rpatch}"
                    echo $(warn "WARNING: PEPATAC requires the python package, $package, >= $required. Try pip install --upgrade $package and checkinstall again.")
                    printf "\n"
                    CONDA_INSTALL=1
                else
                    echo -e $(success "SUCCESS: Python package ${package}\trequired: ${required}\tinstalled: ${installed}")
                fi
            else
                echo -e $(success "SUCCESS: Python package ${package}\trequired: any\tinstalled: ${installed_version}")
            fi
        fi
    done < "requirements.txt"

    # Check tool installation
    declare -a requiredCommands=("perl" "awk" "grep" "sed" "bedtools" "bowtie2" "fseq" "macs2" "preseq" "samblaster" "samtools" "skewer" "bedToBigBed" "bigWigCat" "wigToBigWig" "Rscript")

    for cmd in ${requiredCommands[@]}; do
        if ! is_executable $cmd; then
            echo $(warn "WARNING: Please install $cmd and checkinstall again.")
            printf "\n"
            CONDA_INSTALL=1
        else
            echo -e $(success "SUCCESS: ${cmd}")
        fi
    done

    ## Check R packages
    if ! is_executable "R"; then
        echo $(warn "WARNING: PEPATAC requires R 3.5 or greater.\n Please install R>=3.5 and checkinstall again.")
        printf "\n"
        exit 1
    else
        rVer=$(R --version 2>&1 | grep 'R version' | awk '{print $3}')
        rVer=$(echo "${rVer//.}")
        if [ "$rVer" -lt "350" ]; then
            echo $(warn "WARNING: PEPATAC requires R 3.5 or greater. Update R and checkinstall again.")
            printf "\n"
            CONDA_INSTALL=1
        fi
    fi

    declare -a requiredRPackages=("optigrab" "devtools" "GenomicDistributions" "PEPATACr" "data.table" "pepr" "gplots" "grid" "ggplot2" "scales" "IRanges" "GenomicRanges")
    for package in ${requiredRPackages[@]}; do
        cmd=$(echo "Rscript -e 'library(\"$package\")'")
        packageInstalled=$(eval $cmd 2>&1)
        if [[ "$packageInstalled" == *Error* ]]; then
            echo $(warn "WARNING: Please install the R package, $package, and checkinstall again.")
            printf "\n"
            CONDA_INSTALL=1
        else
            echo -e $(success "SUCCESS: R package: ${package}")
        fi
    done

    conda deactivate
fi

################################################################################
echo -e "-----------------------------------------------------------"
echo -e "Checking bulker installation...                            "
BULKER_INSTALL=0

if ! is_executable "bulker"; then
    echo $(warn "WARNING: To use bulker, pip install bulker and checkinstall again.")
    printf "\n"
    BULKER_INSTALL=1
else
    BULKER_INSTALL=0
    echo -e $(success "SUCCESS: bulker")
fi

CWD=$(pwd)

if [ -f "$CWD/sample_pipeline_interface.yaml" ]; then
    crate=$(grep 'bulker_crate' $CWD/sample_pipeline_interface.yaml | awk '{print $2}')
else:
    crate="databio/pepatac:1.0.7"
echo "crate: ${crate}"

yes n | bulker load $crate

if [ $? -eq 0 ]; then
    echo $(warn "WARNING: Could not bulker load ${crate}. Check out https://bulker.databio.org/en/latest/install/.")
    printf "\n"
    BULKER_INSTALL=1
fi

isActivatable=$(bulker run ${crate} $CWD/pipelines/pepatac.py --help)
#echo "isActivatable: ${isActivatable}"
if [ -v "$isActivatable" ]; then
    echo $(warn "WARNING: Could not activate the bulker crate, ${crate}. Check out https://bulker.databio.org/en/latest/install/.")
    printf "\n"
    BULKER_INSTALL=1
else
    BULKER_INSTALL=0
    echo -e $(success "SUCCESS: bulker run ${crate}")
fi

################################################################################
echo -e "-----------------------------------------------------------"
echo -e "             PEPATAC checkinstall results                  "

if [ "$NATIVE_INSTALL" -eq 0 ]; then
    echo -e $(success "SUCCESS: PEPATAC can be run using native installations!")
else
    echo -e $(fail "ERROR: PEPATAC cannot be run using native installations.")
fi

if [ "$CONDA_INSTALL" -eq 0  ]; then
    echo -e $(success "SUCCESS: PEPATAC can be run using conda installation!")
else
    echo -e $(fail "ERROR: PEPATAC cannot be run via conda.")
fi

if [ "$BULKER_INSTALL" -eq 0  ]; then
    echo -e $(success "SUCCESS: PEPATAC can be run using bulker!")
else
    echo -e $(fail "ERROR: PEPATAC cannot be run using bulker.")
fi

if [ "$NATIVE_INSTALL" -eq 1 ] && [ "$CONDA_INSTALL" -eq 1 ] && [ "$BULKER_INSTALL" -eq 1 ]; then
    echo -e "ERROR: PEPATAC is not successfully installed. Check the above output for direction on missing tools or packages."
fi

echo -e "-----------------------------------------------------------"
